---
const {
  title = '',
  oneLiner = '',
  keyResults = [],
  situation = '',
  intervention = [],
  playbook = [],
} = Astro.props as {
  title: string;
  oneLiner: string;
  keyResults: string[];
  situation: string;
  intervention: string[];
  playbook: string[];
};
---

<article class="rounded-lg border border-neutral-200 bg-white/80">
	<div class="px-4 py-4 md:px-6 md:py-6">
		<!-- Summary View -->
		<header class="space-y-2">
			<h3 class="text-lg md:text-xl font-semibold tracking-tight">{title}</h3>
			<p class="text-neutral-700">{oneLiner}</p>
			{keyResults?.length > 0 && (
				<ul class="mt-3 list-disc pl-5 space-y-1 text-neutral-800">
					{keyResults.map((item) => <li>{item}</li>)}
				</ul>
			)}
		</header>

		<div class="mt-4">
			<button type="button" class="toggle-btn inline-flex items-center rounded-md border border-neutral-300 bg-white px-3 py-1.5 text-sm text-slate-900 hover:bg-neutral-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-neutral-300" aria-expanded="false">
				[+] Show the Playbook
			</button>
		</div>

		<!-- Details View -->
		<section class="details mt-6 hidden" aria-hidden="true">
			<div class="space-y-6 text-neutral-800">
				<div>
					<h4 class="text-base md:text-lg font-medium">The Situation</h4>
					<p class="mt-2">{situation}</p>
				</div>
				<div>
					<h4 class="text-base md:text-lg font-medium">My Intervention</h4>
					{intervention?.length > 0 && (
						<ol class="mt-2 list-decimal pl-5 space-y-1">
							{intervention.map((step) => <li>{step}</li>)}
						</ol>
					)}
				</div>
				<div>
					<h4 class="text-base md:text-lg font-medium">My Repeatable Playbook</h4>
					{playbook?.length > 0 && (
						<ol class="mt-2 list-decimal pl-5 space-y-1">
							{playbook.map((step) => <li>{step}</li>)}
						</ol>
					)}
				</div>
			</div>
		</section>
	</div>
</article>

<script>
  // Client-side toggle for showing/hiding the playbook details
  // Uses progressive enhancement: content is visible only when JS toggles it
  (function () {
    const root = document.currentScript?.closest('article');
    if (!root) return;
    const btn = root.querySelector('.toggle-btn');
    const details = root.querySelector('.details');
    if (!(btn instanceof HTMLButtonElement) || !(details instanceof HTMLElement)) return;

    const toggleBtn = btn;
    const detailsEl = details;

    function show() {
      detailsEl.classList.remove('hidden');
      detailsEl.setAttribute('aria-hidden', 'false');
      toggleBtn.setAttribute('aria-expanded', 'true');
      toggleBtn.textContent = '[-] Hide the Playbook';
    }

    function hide() {
      detailsEl.classList.add('hidden');
      detailsEl.setAttribute('aria-hidden', 'true');
      toggleBtn.setAttribute('aria-expanded', 'false');
      toggleBtn.textContent = '[+] Show the Playbook';
    }

    // Initialize hidden
    hide();

    toggleBtn.addEventListener('click', () => {
      const expanded = toggleBtn.getAttribute('aria-expanded') === 'true';
      if (expanded) hide();
      else show();
    });
  })();
</script>


